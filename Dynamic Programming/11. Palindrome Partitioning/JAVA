// https://leetcode.com/problems/palindrome-partitioning

class Solution {

    private void helper(String s, int ind, List<String> curr, List<List<String>> res, boolean[][] dp) {
        if(ind == s.length()) {
            res.add(new ArrayList<>(curr));
            return;
        }

        for(int i = ind; i<s.length(); i++) {
            if(dp[ind][i]) {
                curr.add(s.substring(ind, i+1));
                helper(s, i+1, curr, res, dp);
                curr.remove(curr.size() - 1);
            }
        }
    }

    public List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];

        for(int l = 1; l<=n; l++) {
            for(int i = 0; i<=n-l; i++) {
                int j = i+l-1;
                if(i == j) dp[i][j] = true;
                else if(s.charAt(i) == s.charAt(j) && (j == i+1 || dp[i+1][j-1]))
                    dp[i][j] = true;
                else dp[i][j] = false;
            }
        }

        List<List<String>> res = new ArrayList<>();
        List<String> curr = new ArrayList<>();
        helper(s, 0, curr, res, dp);
        return res;
    }
}