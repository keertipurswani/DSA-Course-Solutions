// https://leetcode.com/problems/coin-change

// Solution 1 - Recursion TLE - indices 0 to n

class Solution {

    int helper(int[] coins, int amount, int ind) {
        if(amount == 0) return 0;
        if(amount < 0 || ind >= coins.length) 
            return Integer.MAX_VALUE - 1;

        int res = -1;

        //exc
        res = helper(coins, amount, ind+1);

        //inc
        if(coins[ind] <= amount) {
            res = Math.min(res, 1 + helper(coins, amount - coins[ind], ind));
        }

        return res;
    }

    public int coinChange(int[] coins, int amount) {
        int res = helper(coins, amount, 0);
        return (res == Integer.MAX_VALUE - 1) ? -1 : res;
    }
}

//Solution 2 - Memoization

class Solution {

    int helper(int[] coins, int amount, int ind, int[][] dp) {

        if(amount == 0) return 0;
        if(amount < 0 || ind >= coins.length) 
            return Integer.MAX_VALUE - 1;

        if(dp[ind][amount] != -1) 
            return dp[ind][amount];

        //exc
        dp[ind][amount] = helper(coins, amount, ind+1, dp);

        //inc
        if(coins[ind] <= amount) {
            dp[ind][amount] = Math.min(dp[ind][amount], 1 + helper(coins, amount - coins[ind], ind, dp));
        }

        return dp[ind][amount];
    }

    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length][amount+1];

        for(int[] row : dp)
            Arrays.fill(row, -1);

        int res = helper(coins, amount, 0, dp);
        return (res == Integer.MAX_VALUE - 1) ? -1 : res;
    }
}

//Solution 3 - Bottom Up DP

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n+1][amount+1];

        for(int[] row: dp)
            Arrays.fill(row, 0);

        for(int j = 1; j<= amount; j++)
            dp[0][j] = Integer.MAX_VALUE - 1;

        for(int i = 1; i<= n; i++) {
            for(int j = 1; j<= amount; j++) {
                if(coins[i-1] > j)
                    dp[i][j] = dp[i-1][j];
                else dp[i][j] = Math.min(dp[i-1][j], 1+ dp[i][j-coins[i-1]]);
            }
        }

        return dp[n][amount] == Integer.MAX_VALUE -1 ? -1 : dp[n][amount];
    }
}
