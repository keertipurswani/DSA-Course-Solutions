//https://leetcode.com/problems/regular-expression-matching

// Solution - Recursion

class Solution {
    private boolean helper(String s, String p, int ind1, int ind2) {
        if(ind1 < 0 && ind2 < 0) return true;
        //pattern is empty, string is not
        if(ind2 < 0) return false;
        //string is empty, pattern is not
        if(ind1 < 0) {
            if(p.charAt(ind2) == '*') return helper(s, p, ind1, ind2-2);
            return false;
        }

        if(s.charAt(ind1) == p.charAt(ind2) || p.charAt(ind2) == '.')
            return helper(s, p, ind1-1, ind2-1);
        
        if(p.charAt(ind2) == '*') {
            //* represents zero of the preceding element
            if(helper(s, p, ind1, ind2-2)) return true;
            //s[ind1] is part of the sequence represented by *
            if(ind2 > 0 && (s.charAt(ind1) == p.charAt(ind2-1) || p.charAt(ind2-1) == '.'))
                return helper(s, p, ind1-1, ind2);
        }

        return false;
    }

    public boolean isMatch(String s, String p) {
        return helper(s, p, s.length() - 1, p.length() - 1);
    }
}

//Solution - Recursion with Memoization

class Solution {
    private int helper(String s, String p, int ind1, int ind2, int[][] dp) {
        if(ind1 < 0 && ind2 < 0) return 1;
        if(ind2 < 0) return 0;
        if(ind1 < 0) {
            if(p.charAt(ind2) == '*') return helper(s, p, ind1, ind2-2, dp);
            return 0;
        }

        if(dp[ind1][ind2] != -1) return dp[ind1][ind2];

        if(s.charAt(ind1) == p.charAt(ind2) || p.charAt(ind2) == '.')
            return dp[ind1][ind2] = helper(s, p, ind1-1, ind2-1, dp);
        
        if(p.charAt(ind2) == '*') {
            if(helper(s, p, ind1, ind2-2, dp) == 1) return dp[ind1][ind2] = 1;
            if(ind2 > 0 && (s.charAt(ind1) == p.charAt(ind2-1) || p.charAt(ind2-1) == '.'))
                return dp[ind1][ind2] = helper(s, p, ind1-1, ind2, dp);
        }

        return 0;
    }

    public boolean isMatch(String s, String p) {
        int[][] dp = new int[s.length()][p.length()];
        for(int[] row : dp) 
            Arrays.fill(row, -1);

        return helper(s, p, s.length() - 1, p.length() - 1, dp) == 1 ? true : false;
    }
}

//Solution - Bottom Up DP
class Solution {
    public boolean isMatch(String s, String p) {

        int n = s.length(), m = p.length();
        boolean[][] dp = new boolean[n+1][m+1];
        dp[0][0] = true;

        //pattern is empty, string is not
        for(int i = 1; i<=n; i++) dp[i][0] = false;
        for(int j = 1; j<=m ; j++) 
            dp[0][j] = (j>1 && p.charAt(j-1) == '*') ? dp[0][j-2] : false;

        for(int i = 1; i<=n ; i++) {
            for(int j = 1; j<=m ; j++) {

                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '.')
                    dp[i][j] = dp[i-1][j-1];

                else if(p.charAt(j-1) == '*' && j>1) {
                    //0 of the preceding element
                    dp[i][j] = dp[i][j-2];
                    //s[i-1] included in the seq represented by '*'
                    if(s.charAt(i-1) == p.charAt(j-2) || p.charAt(j-2) == '.')
                        dp[i][j] = dp[i][j] || dp[i-1][j];
                } 
                
                else dp[i][j] = false;
            }
        }

        return dp[n][m];
    }
}