// https://leetcode.com/problems/palindromic-substrings

// Solution - Recursion with Memoization

class Solution {
    private int helper(String s, int i, int j, int[][] dp) {
        if(j<i) return 0;
        if(j == i) return dp[i][j] = 1;

        if(dp[i][j] != -1) return dp[i][j];
        
        helper(s, i+1, j, dp);
        helper(s, i, j-1, dp);

        if(s.charAt(i) == s.charAt(j) && (j == i+1 || helper(s, i+1, j-1, dp) == 1))
            return dp[i][j] = 1; 
        
        return dp[i][j] = 0;
    }

    public int countSubstrings(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];
        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }
        helper(s, 0, s.length() - 1, dp);
        int res = 0;
        for(int l = 1; l<=n ; l++) {
            for(int i = 0; i<=n-l; i++) {
                int j = i+l-1;
                res += dp[i][j]; 
            }
        }
        return res;
    }
}

// Solution - Bottom Up DP

class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int res = 0;

        for(int l = 1; l<=n; l++) {
            for(int i = 0; i<=n-l ; i++) {
                int j = i+l-1;
                if(i == j) dp[i][j] = true;
                else if(s.charAt(i) == s.charAt(j) && (j == i+1 || dp[i+1][j-1]))
                    dp[i][j] = true;
                else dp[i][j] = false;
                if(dp[i][j]) res++;
            }
        }
        return res;
    }
}