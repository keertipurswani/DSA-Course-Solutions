// https://leetcode.com/problems/partition-equal-subset-sum

// Solution 1 - Recursion TLE 

class Solution {

    private boolean helper(int ind, int target, int[] nums) {
        if(ind >= nums.length)
            return target == 0;

        if(helper(ind+1, target, nums))
            return true;

        if(nums[ind] <= target)
            return helper(ind+1, target - nums[ind], nums);

        return false;
    }

    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i = 0; i<nums.length ; i++)
            sum += nums[i];

        if(sum % 2 == 1) return false;

        return helper(0, sum/2 , nums);
    }
}

// Solution 2 - Memoization 

class Solution {

    private int helper(int ind, int target, int[] nums, int[][] dp) {
        if(ind >= nums.length)
            return (target == 0) ? 1 : 0;

        if(dp[ind][target] != -1)
            return dp[ind][target];

        if(helper(ind+1, target, nums, dp) == 1)
            return dp[ind][target] = 1;

        if(nums[ind] <= target)
            return dp[ind][target] = helper(ind+1, target - nums[ind], nums, dp);

        return dp[ind][target] = 0;
    }

    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i = 0; i<nums.length ; i++)
            sum += nums[i];

        if(sum % 2 == 1) return false;

        int dp[][] = new int[nums.length][(sum/2) + 1];
        for (int row[] : dp)
            Arrays.fill(row, -1);

        return helper(0, sum/2 , nums, dp) == 1 ? true : false;
    }
}   

// Solution 3 - Bottom Up DP

class Solution {

    public boolean canPartition(int[] nums) {
        int sum = 0, n = nums.length;
        for(int i = 0; i<n ; i++)
            sum += nums[i];

        if(sum % 2 == 1) return false;
        int target = sum/2;

        boolean dp[][] = new boolean[n+1][target + 1];
        for (boolean row[] : dp)
            Arrays.fill(row, false);

        dp[0][0] = true;
        for(int i = 1; i<=n ; i++)
            dp[i][0] = true;

        for(int i = 1; i<=n ; i++) {
            for(int j = 1; j<= target ; j++) {
                //inc
                if(nums[i-1] <= j)
                    dp[i][j] = dp[i-1][j-nums[i-1]];
                //exc
                dp[i][j] = dp[i][j] || dp[i-1][j];
            }
        }

        return dp[n][target];
    }
}

// Solution 4 - Space Optimized Bottom Up DP

class Solution {

    public boolean canPartition(int[] nums) {
        int sum = 0, n = nums.length;
        for(int i = 0; i<n ; i++)
            sum += nums[i];

        if(sum % 2 == 1) return false;
        int target = sum/2;

        boolean prev[] = new boolean[target + 1];
        boolean curr[] = new boolean[target + 1];

        prev[0] = true; curr[0] = true;

        for(int i = 1; i<=n ; i++) {
            for(int j = 1; j<= target ; j++) {
                //inc
                if(nums[i-1] <= j)
                    curr[j] = prev[j-nums[i-1]];
                //exc
                curr[j] = curr[j] || prev[j];
            }
            prev = curr.clone();
        }

        return curr[target];
    }
}